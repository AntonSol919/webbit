/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_pkt_free(a: number): void;
export function pkt_toString(a: number, b: number): void;
export function pkt_toHTML(a: number, b: number, c: number): void;
export function pkt_obj(a: number): number;
export function pkt_pkt_type(a: number): number;
export function pkt_hash(a: number, b: number): void;
export function pkt_data(a: number, b: number): void;
export function pkt_domain(a: number, b: number): void;
export function pkt_create(a: number, b: number): void;
export function pkt_group(a: number, b: number): void;
export function pkt_path(a: number, b: number): void;
export function pkt_ipath(a: number, b: number): void;
export function pkt_recv(a: number, b: number): void;
export function pkt_path0(a: number, b: number): void;
export function pkt_path1(a: number, b: number): void;
export function pkt_path2(a: number, b: number): void;
export function pkt_path3(a: number, b: number): void;
export function pkt_path4(a: number, b: number): void;
export function pkt_path5(a: number, b: number): void;
export function pkt_path6(a: number, b: number): void;
export function pkt_path7(a: number, b: number): void;
export function pkt_path_list(a: number): number;
export function pkt_pubkey(a: number, b: number): void;
export function pkt_signature(a: number, b: number): void;
export function pkt_path_len(a: number): number;
export function pkt_size(a: number): number;
export function pkt_links(a: number): number;
export function pkt_links_array(a: number): number;
export function pkt_links_bytes(a: number): number;
export function __wbg_links_free(a: number): void;
export function __wbg_linkres_free(a: number): void;
export function __wbg_get_linkres_done(a: number): number;
export function __wbg_set_linkres_done(a: number, b: number): void;
export function __wbg_get_linkres_value(a: number): number;
export function __wbg_set_linkres_value(a: number, b: number): void;
export function links_default(): number;
export function links_next(a: number): number;
export function __wbg_link_free(a: number): void;
export function link_new(a: number, b: number, c: number): void;
export function link_toJSON(a: number, b: number): void;
export function link_toAbeJSON(a: number, b: number): void;
export function link_toHTML(a: number, b: number): void;
export function link_ptr(a: number, b: number): void;
export function link_tag(a: number, b: number): void;
export function __wbg_jserr_free(a: number): void;
export function jserr_toJSON(a: number): number;
export function jserr_toString(a: number, b: number): void;
export function __wbg_lkconsts_free(a: number): void;
export function get_consts(): number;
export function lkconsts_PUBLIC(a: number, b: number): void;
export function main(): void;
export function lk_datapoint(a: number, b: number): void;
export function __wbg_signingkey_free(a: number): void;
export function signingkey_pubkey(a: number, b: number): void;
export function lk_keygen(): number;
export function lk_key_encrypt(a: number, b: number, c: number, d: number): void;
export function lk_key_pubkey(a: number, b: number, c: number): void;
export function lk_key_decrypt(a: number, b: number, c: number, d: number, e: number): void;
export function lk_linkpoint(a: number, b: number, c: number): void;
export function lk_keypoint(a: number, b: number, c: number, d: number): void;
export function lk_write(a: number, b: number, c: number): void;
export function lk_read(a: number, b: number, c: number): void;
export function lk_read_unchecked(a: number, b: number, c: number): void;
export function b64(a: number, b: number, c: number, d: number): void;
export function lk_encode(a: number, b: number, c: number, d: number, e: number): void;
export function blake3_hash(a: number, b: number, c: number): void;
export function build_info(a: number): void;
export function link_toString(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
